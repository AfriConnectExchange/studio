-- =================================================================
--          AFRICONNECT EXCHANGE COMPREHENSIVE DATABASE SCHEMA
-- =================================================================
-- This script creates all tables based on the project's SRS.
-- It's organized by Functional Requirement (FR) number and includes
-- Row Level Security (RLS) policies for data protection.
-- Run this entire script in the Supabase SQL Editor.
-- =================================================================

-- PRELIMINARY SETUP: Define custom types (ENUMs) for data consistency
CREATE TYPE role_enum AS ENUM ('buyer', 'seller', 'SME', 'trainer', 'admin');
CREATE TYPE order_status_enum AS ENUM ('pending', 'processing', 'shipped', 'delivered', 'cancelled', 'disputed');
CREATE TYPE payment_status_enum AS ENUM ('pending', 'paid', 'failed', 'refunded');
CREATE TYPE escrow_status_enum AS ENUM ('held', 'released', 'refunded', 'frozen');
CREATE TYPE barter_status_enum AS ENUM ('pending', 'accepted', 'declined', 'cancelled');
CREATE TYPE kyc_status_enum AS ENUM ('not_verified', 'pending', 'verified', 'rejected');


-- =================================================================
-- FR01: USER MANAGEMENT (Users, Roles, Profiles)
-- =================================================================
-- Table for user roles
CREATE TABLE roles (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name role_enum NOT NULL UNIQUE
);
-- Pre-populate the roles
INSERT INTO roles (name) VALUES ('buyer'), ('seller'), ('SME'), ('trainer'), ('admin');

-- Table for public user profiles, linked to the private auth.users table
CREATE TABLE profiles (
  id UUID NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  full_name TEXT,
  avatar_url TEXT, -- Added for profile pictures
  phone TEXT,
  location TEXT,
  onboarding_completed BOOLEAN DEFAULT FALSE,
  role_id BIGINT REFERENCES roles(id) ON DELETE SET NULL,
  kyc_status kyc_status_enum DEFAULT 'not_verified',
  language VARCHAR(10) DEFAULT 'en',
  timezone VARCHAR(50) DEFAULT 'GMT+0',
  notifications_email BOOLEAN DEFAULT TRUE,
  notifications_sms BOOLEAN DEFAULT FALSE,
  notifications_push BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- RLS for profiles: Users can see all profiles, but only edit their own.
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Public profiles are viewable by everyone." ON profiles FOR SELECT USING (true);
CREATE POLICY "Users can insert their own profile." ON profiles FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Users can update their own profile." ON profiles FOR UPDATE USING (auth.uid() = id);


-- =================================================================
-- FR02 & FR13: MARKETPLACE & ORDERS (Products, Categories, Orders)
-- =================================================================
CREATE TABLE categories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  description TEXT
);
-- RLS for categories: Publicly viewable
ALTER TABLE categories ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Categories are viewable by everyone." ON categories FOR SELECT USING (true);

CREATE TABLE products (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  seller_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  category_id BIGINT REFERENCES categories(id) ON DELETE SET NULL,
  name TEXT NOT NULL,
  description TEXT,
  price NUMERIC(12, 2) NOT NULL CHECK (price >= 0),
  image_url TEXT,
  stock_quantity INT DEFAULT 1, -- Added for inventory management
  is_free BOOLEAN DEFAULT FALSE, -- Added for giveaways
  is_available BOOLEAN DEFAULT TRUE,
  deleted_at TIMESTAMPTZ, -- Added for soft deletes
  created_at TIMESTAMPTZ DEFAULT NOW()
);
-- RLS for products: Viewable by all, editable only by owner.
ALTER TABLE products ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Products are viewable by everyone." ON products FOR SELECT USING (deleted_at IS NULL);
CREATE POLICY "Users can insert their own products." ON products FOR INSERT WITH CHECK (auth.uid() = seller_id);
CREATE POLICY "Users can update their own products." ON products FOR UPDATE USING (auth.uid() = seller_id);
CREATE POLICY "Users can delete their own products (soft delete)." ON products FOR DELETE USING (auth.uid() = seller_id);

CREATE TABLE orders (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  buyer_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  status order_status_enum DEFAULT 'pending',
  total_amount NUMERIC(12, 2) NOT NULL,
  shipping_address JSONB,
  deleted_at TIMESTAMPTZ, -- Added for soft deletes
  created_at TIMESTAMPTZ DEFAULT NOW()
);
-- RLS for orders: Users can only see and manage their own orders.
ALTER TABLE orders ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own orders." ON orders USING (auth.uid() = buyer_id);


CREATE TABLE order_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id BIGINT NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
  product_id BIGINT NOT NULL REFERENCES products(id) ON DELETE RESTRICT,
  quantity INT NOT NULL CHECK (quantity > 0),
  price_at_purchase NUMERIC(12, 2) NOT NULL
);
-- RLS for order_items: Inherits access from the parent order.
ALTER TABLE order_items ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view items in their own orders." ON order_items FOR SELECT USING (
  EXISTS (SELECT 1 FROM orders WHERE orders.id = order_id AND orders.buyer_id = auth.uid())
);

CREATE TABLE delivery_status (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id BIGINT NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
    status_update TEXT NOT NULL,
    tracking_details JSONB,
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
-- RLS for delivery_status
ALTER TABLE delivery_status ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view delivery status for their own orders." ON delivery_status FOR SELECT USING (
  EXISTS (SELECT 1 FROM orders WHERE orders.id = order_id AND orders.buyer_id = auth.uid())
);


-- =================================================================
-- FR03: PAYMENTS & TRANSACTIONS (Payments, Escrow, Barters)
-- =================================================================
CREATE TABLE payments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id BIGINT NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
  amount NUMERIC(12, 2) NOT NULL,
  status payment_status_enum DEFAULT 'pending',
  provider TEXT,
  transaction_ref TEXT,
  gateway_response JSONB,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
-- RLS for payments
ALTER TABLE payments ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view payments for their own orders." ON payments FOR SELECT USING (
  EXISTS (SELECT 1 FROM orders WHERE orders.id = order_id AND orders.buyer_id = auth.uid())
);

CREATE TABLE escrow_transactions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id BIGINT NOT NULL REFERENCES orders(id) ON DELETE CASCADE UNIQUE,
  status escrow_status_enum DEFAULT 'held',
  release_on TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
-- RLS for escrow
ALTER TABLE escrow_transactions ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view escrow for their own orders." ON escrow_transactions FOR SELECT USING (
  EXISTS (SELECT 1 FROM orders JOIN profiles ON orders.buyer_id = profiles.id WHERE orders.id = order_id AND (orders.buyer_id = auth.uid() OR EXISTS (SELECT 1 FROM products JOIN order_items ON products.id = order_items.product_id WHERE order_items.order_id = orders.id AND products.seller_id = auth.uid())))
);

CREATE TABLE barters (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  proposer_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  proposer_product_id BIGINT NOT NULL REFERENCES products(id) ON DELETE CASCADE,
  responder_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  responder_product_id BIGINT NOT NULL REFERENCES products(id) ON DELETE CASCADE,
  status barter_status_enum DEFAULT 'pending',
  message TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
-- RLS for barters
ALTER TABLE barters ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own barter proposals." ON barters USING (auth.uid() = proposer_id OR auth.uid() = responder_id);


-- =================================================================
-- FR04: ADVERTS (SME Promotion)
-- =================================================================
CREATE TABLE adverts (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  sme_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  content TEXT,
  image_urls JSONB,
  is_active BOOLEAN DEFAULT TRUE,
  expires_on DATE,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
-- RLS for adverts
ALTER TABLE adverts ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Adverts are publicly viewable." ON adverts FOR SELECT USING (is_active = TRUE AND (expires_on IS NULL OR expires_on > NOW()));
CREATE POLICY "SMEs can manage their own adverts." ON adverts FOR ALL USING (auth.uid() = sme_id);


-- =================================================================
-- FR05: NOTIFICATIONS & ALERTS
-- =================================================================
CREATE TABLE notifications (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  content TEXT NOT NULL,
  is_read BOOLEAN DEFAULT FALSE,
  link_url TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
-- RLS for notifications
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own notifications." ON notifications FOR ALL USING (auth.uid() = user_id);


-- =================================================================
-- FR06: LEARNING MANAGEMENT SYSTEM (LMS)
-- =================================================================
CREATE TABLE courses (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  trainer_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  description TEXT,
  is_published BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
-- RLS for courses
ALTER TABLE courses ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Published courses are viewable by everyone." ON courses FOR SELECT USING (is_published = TRUE);
CREATE POLICY "Trainers can manage their own courses." ON courses FOR ALL USING (auth.uid() = trainer_id);

CREATE TABLE enrollments (
  user_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  course_id BIGINT NOT NULL REFERENCES courses(id) ON DELETE CASCADE,
  enrolled_at TIMESTAMPTZ DEFAULT NOW(),
  progress_percentage INT DEFAULT 0 CHECK (progress_percentage >= 0 AND progress_percentage <= 100),
  PRIMARY KEY (user_id, course_id)
);
-- RLS for enrollments
ALTER TABLE enrollments ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own enrollments." ON enrollments FOR ALL USING (auth.uid() = user_id);

CREATE TABLE certificates (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  enrollment_user_id UUID NOT NULL,
  enrollment_course_id BIGINT NOT NULL,
  issued_on TIMESTAMPTZ DEFAULT NOW(),
  certificate_url TEXT,
  FOREIGN KEY (enrollment_user_id, enrollment_course_id) REFERENCES enrollments(user_id, course_id) ON DELETE CASCADE
);
-- RLS for certificates
ALTER TABLE certificates ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can view their own certificates." ON certificates FOR SELECT USING (auth.uid() = enrollment_user_id);


-- =================================================================
-- FR07, FR10, FR11: LOGS & RECORDS
-- =================================================================
-- These tables are typically accessed by service roles, so RLS is often restrictive.
CREATE TABLE analytics_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  event_type TEXT NOT NULL,
  user_id UUID REFERENCES profiles(id),
  details JSONB,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
ALTER TABLE analytics_logs ENABLE ROW LEVEL SECURITY;
-- (No default user access policies for analytics logs)

CREATE TABLE security_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  event_type TEXT NOT NULL,
  user_id UUID REFERENCES profiles(id),
  details JSONB,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
ALTER TABLE security_logs ENABLE ROW LEVEL SECURITY;
-- (No default user access policies for security logs)

CREATE TABLE moderation_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  admin_id UUID NOT NULL REFERENCES profiles(id),
  action TEXT NOT NULL,
  target_entity TEXT,
  target_id TEXT,
  reason TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
ALTER TABLE moderation_logs ENABLE ROW LEVEL SECURITY;
-- (No default user access policies for moderation logs)


-- =================================================================
-- FR08: REMITTANCE SUPPORT
-- =================================================================
CREATE TABLE remittances (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  sender_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  amount NUMERIC(12, 2) NOT NULL,
  recipient_details JSONB NOT NULL,
  status TEXT DEFAULT 'pending',
  transaction_ref TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
-- RLS for remittances
ALTER TABLE remittances ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own remittance history." ON remittances FOR ALL USING (auth.uid() = sender_id);


-- =================================================================
-- FR09: RATINGS & REVIEWS
-- =================================================================
CREATE TABLE reviews (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  author_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  product_id BIGINT REFERENCES products(id) ON DELETE CASCADE,
  seller_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  rating INT NOT NULL CHECK (rating >= 1 AND rating <= 5),
  comment TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  CHECK (num_nonnulls(product_id, seller_id) = 1)
);
-- RLS for reviews
ALTER TABLE reviews ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Reviews are publicly viewable." ON reviews FOR SELECT USING (true);
CREATE POLICY "Users can create reviews." ON reviews FOR INSERT WITH CHECK (auth.uid() = author_id);
CREATE POLICY "Users can update their own reviews." ON reviews FOR UPDATE USING (auth.uid() = author_id);


-- =================================================================
-- FR12: CUSTOMER CARE
-- =================================================================
CREATE TABLE support_tickets (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  subject TEXT NOT NULL,
  description TEXT,
  status TEXT DEFAULT 'open',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
-- RLS for support_tickets
ALTER TABLE support_tickets ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own support tickets." ON support_tickets FOR ALL USING (auth.uid() = user_id);

CREATE TABLE chatbot_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  session_id TEXT NOT NULL,
  user_id UUID REFERENCES profiles(id),
  user_message TEXT,
  bot_response TEXT,
  timestamp TIMESTAMPTZ DEFAULT NOW()
);
ALTER TABLE chatbot_logs ENABLE ROW LEVEL SECURITY;
-- (No default user access policies for chatbot logs)

-- =================================================================
-- PERFORMANCE: SEARCH FUNCTION
-- =================================================================
-- This function combines product name, description, category, and seller name
-- into a single searchable field for better performance.
CREATE OR REPLACE FUNCTION public.search_products(search_term TEXT)
RETURNS SETOF products
LANGUAGE sql
STABLE
AS $$
  SELECT p.*
  FROM products p
  LEFT JOIN categories c ON p.category_id = c.id
  LEFT JOIN profiles pr ON p.seller_id = pr.id
  WHERE
    p.deleted_at IS NULL AND
    (
      p.name ILIKE '%' || search_term || '%' OR
      p.description ILIKE '%' || search_term || '%' OR
      c.name ILIKE '%' || search_term || '%' OR
      pr.full_name ILIKE '%' || search_term || '%'
    )
$$;

-- =================================================================
-- FUNCTION to delete user and their profile
-- =================================================================
CREATE OR REPLACE FUNCTION public.delete_user_and_profile(user_id_to_delete uuid)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- Check if the calling user has the 'admin' role
  IF (
    SELECT roles.name FROM roles JOIN profiles ON roles.id = profiles.role_id WHERE profiles.id = auth.uid()
  ) <> 'admin' THEN
    RAISE EXCEPTION 'Only administrators can delete users.';
  END IF;

  DELETE FROM auth.users WHERE id = user_id_to_delete;
  -- The profile will be deleted automatically due to the ON DELETE CASCADE constraint.
END;
$$;


-- =================================================================
--                        END OF SCHEMA
-- =================================================================
